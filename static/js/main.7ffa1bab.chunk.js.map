{"version":3,"sources":["store/issues/issues.types.js","store/constants.js","store/Mock/aip.js","store/issues/issues.actions.js","App.js","serviceWorker.js","store/issues/issues.reducer.js","store/store.js","index.js"],"names":["REQUEST_ISSUES","RECEIVED_ISSUES","LOADING_ERROR","NETWORK_ERROR","POSTING_APPROVAL","APPROVAL_POSTED","IssueTypes","APPROVED","DECLINED","PENDING","setIssue","APPROVE","DECLINE","API_ROOT","cb","timeout","setTimeout","_issues","getPendingIssues","type","dispatch","a","types","ApiGetIssues","response","console","log","receivedIssues","e","mock","issues","recievedAt","Date","now","query","constants","fetch","res","json","setApproval","id","axios","post","then","approvalType","approval","catch","err","error","Issues","lazy","Body","App","fallback","exact","path","component","Boolean","window","location","hostname","match","combineReducers","issuesLoading","state","action","issuesList","localIssuesList","networkError","middleware","thunk","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","reducers","Store","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7ffa1bab.chunk.js","sourcesContent":["// Category Types\nexport const REQUEST_ISSUES = 'REQUEST_ISSUES';\nexport const RECEIVED_ISSUES = 'RECEIVED_ISSUES';\nexport const LOADING_ERROR = 'LOADING_ERROR';\nexport const NETWORK_ERROR = 'NETWORK_ERROR';\n\nexport const POSTING_APPROVAL = 'POSTING_APPROVAL';\nexport const APPROVAL_POSTED = 'APPROVAL_POSTED';\n\nexport const IssueTypes = {\n    APPROVED: 'getApproved',\n    DECLINED: 'getDeclined',\n    PENDING: 'pending',\n}\n\nexport const setIssue = {\n    APPROVE: 'approve',\n    DECLINE: 'decline',\n}","export const API_ROOT = 'http://3f1f2fb7f186.ngrok.io/api/';\nexport const Limit = 20;","\nimport _issues from './issues.json'\n\n\n\nconst TIMEOUT = 100\n\nexport default {\n  getIssues: (cb, timeout) => setTimeout(() => cb(_issues), timeout || TIMEOUT), \n  approve: (payload, cb, timeout) => setTimeout(() => cb(), timeout || TIMEOUT)\n  \n}","import * as constants from \"../constants\";\nimport * as types from \"./issues.types\";\nimport mock from '../Mock/aip'\nimport axios from \"axios\";\n\n\n//calling the shop.getproducts Method\nexport const getPendingIssues = (type) => async (dispatch) => {\n    try {\n        dispatch({ type: types.REQUEST_ISSUES });\n\n        const response =await  ApiGetIssues(type)\n        console.log(\"MainIssues\",response)\n        dispatch(receivedIssues( response))\n        //==============================mOCK====================\n        // mock.getIssues(issues=>{\n        //     console.log(\"index\",issues)\n        //     dispatch(receivedIssues(issues))\n        // })\n    //    =============================================================\n\n    }catch (e) {\n        console.log(e)\n        dispatch({ type: types.LOADING_ERROR, e });\n        mock.getIssues(issues=>{\n            console.log(\"index\",issues)\n            dispatch({ type: types.NETWORK_ERROR, issues });\n            dispatch(receivedIssues(issues))\n            console.log(\"here\")\n        })\n    }\n}\n\nconst receivedIssues = ( issues) => ({\n    type: types.RECEIVED_ISSUES,\n    issues,\n    recievedAt:Date.now()\n})\n\nasync function ApiGetIssues(type) {\n    // let query = constants.API_ROOT+`/?limit=${constants.Limit}&offset=${pageNo}`\n    let query = constants.API_ROOT+`issues/${type}/`\n    const res = await fetch(query);\n    return await res.json()\n}\n\n\n\n\nconst approval = ( id, approvalType) => ({\n    type: types.APPROVAL_POSTED,\n    id,\n    approvalType,\n    recievedAt:Date.now()\n})\n\nexport const setApproval = (id, type) => (dispatch) => {\n    dispatch({type: types.POSTING_APPROVAL});\n    //=============================MOCK===========\n    // mock.approve(id, ()=>{\n    //     dispatch(approval(id, type))\n    // })\n    //========================================================\n    axios\n        .post(constants.API_ROOT + `issues/${id}/${type}/`)\n        .then((res) => {\n            dispatch(approval(id, type));\n            console.log(\"postRes-\", res)\n        })\n        .catch((err) => {\n            dispatch({ type: types.LOADING_ERROR, error:err });\n            console.log(err)\n        });\n};","import React, { Suspense, lazy } from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\nimport './assets/bootstrap4/bootstrap.min.css'\nimport './assets/plugins/font-awesome-4.7.0/css/font-awesome.min.css'\n\n\nconst Issues = lazy(()=> import('./container/issues.container'));\nconst Body = lazy(()=> import('./pages/components/Body'));\n\nfunction App() {\n  return (\n    <Router>\n    \n    <Suspense fallback={<div> Loading ...</div>} >\n             \n        <Switch>\n           \n            <Route exact path='/old' component={Issues}/>\n            <Route exact path='/' component={Body}/>\n            <Route exact path='/newGemenaye' component={Body}/>\n\n        </Switch>\n            {/*<Newsletter/>*/}\n            {/*<Footer/>*/}\n    </Suspense>\n\n</Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport * as types from \"./issues.types\";\n\n const issuesList = (state = [], action) => {\n     // console.log(\"reducer\",action)\n    switch (action.type) {\n      case types.RECEIVED_ISSUES:\n        return action.issues\n        // case types.APPROVAL_POSTED:\n        //     return {\n        //        ...state,\n        //\n        //         ...action.id\n        //     }\n      default:\n        return state\n    }\n  }\n  const localIssuesList = (state = [], action) => {\n     // console.log(\"reducer\",action)\n    switch (action.type) {\n      case types.NETWORK_ERROR:\n        return action.issues\n\n      default:\n        return state\n    }\n  }\n\n  const issuesLoading = (state= false, action)=>{\n      switch(action.type){\n          case types.RECEIVED_ISSUES:\n              return false;\n        case types.REQUEST_ISSUES:\n            return true;\n        case types.LOADING_ERROR:\n            return false;\n        default:\n            return state\n      }\n  }\n\nconst networkError = (state= false, action)=>{\n    switch(action.type){\n        case types.RECEIVED_ISSUES:\n            return false;\n        case types.REQUEST_ISSUES:\n            return false;\n        case types.LOADING_ERROR:\n            return true;\n        default:\n            return state\n    }\n}\n\n  export default combineReducers({\n    issuesLoading,   \n    issuesList,\n      localIssuesList,\n      networkError\n\n  })\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport issues from './issues/issues.reducer'\nimport {createLogger} from 'redux-logger'\n\nconst initialState = {}\nconst middleware = [thunk];\n\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n}\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\n\nexport const reducers = combineReducers({\n    issues\n  });\n\nconst Store = createStore(reducers, initialState, enhancer);\n\nexport default Store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport Store from './store/store'\nimport { getPendingIssues } from './store/issues/issues.actions';\nimport * as types from './store/issues/issues.types'\n\nStore.dispatch(getPendingIssues(types.IssueTypes.PENDING))\n\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}